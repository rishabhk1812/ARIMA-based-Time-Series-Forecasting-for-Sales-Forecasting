data1 <- read.csv("Bike Sales.csv")
str(data1)

# Convert Date of Sales into a Date object
data1$Date <-  as.Date(data1$Date, format = "%y-%m-%d")
str(data1$Date)

# Aggregate data by month and calculate total sales
monthly_sales <- data1 %>%
  group_by(Month = format(Date, "%Y-%m")) %>%
  summarise(Revenue = sum(Revenue)) %>%
  arrange(Month)

# Convert Month to Date format and Total_Revenue to Time Series object
monthly_sales$Month <- as.Date(paste0(monthly_sales$Month, "-01"))
sales_ts <- ts(monthly_sales$Revenue, start = c(as.numeric(format(min(monthly_sales$Month), "%Y")),
                                                      as.numeric(format(min(monthly_sales$Month), "%m"))),
               frequency = 12)# Monthly data

library(zoo)
data1$Revenue <- na.approx(data1$Revenue)

# Fit ARIMA model
arima_model <- auto.arima(sales_ts)

# Print model summary
summary(arima_model)

# Forecast for the next 12 months
sales_forecast <- forecast(arima_model, h = 12)


# Extract forecasted values
forecasted_values <- sales_forecast$mean

# View forecasted monthly values
print(forecasted_values)

# Calculate the total forecasted sales for the year
total_forecasted_sales <- sum(forecasted_values)
print(paste("Total Forecasted Sales for the Next Year:", round(total_forecasted_sales, 2)))

#################

# Extract forecasted values
forecasted_values <- data.frame(
  Date = seq(from = max(monthly_sales$Month) + 1, 
             by = "month", 
             length.out = length(sales_forecast$mean)),
  Sales = as.numeric(sales_forecast$mean),
  Type = "Forecast"
)

# Historical values
historical_values <- data.frame(
  Date = monthly_sales$Month,
  Sales = monthly_sales$Revenue,
  Type = "Actual"
)

# Combine historical and forecasted data
combined_data <- rbind(historical_values, forecasted_values)

# View the combined data (optional)
print(combined_data)

# Line chart with Plotly
plot_ly(data = combined_data, x = ~Date, y = ~Sales, color = ~Type, 
        type = 'scatter', mode = 'lines') %>%
  layout(
    title = "Sales Over Time with Forecast Highlighted",
    xaxis = list(title = "Date"),
    yaxis = list(title = "Sales"),
    legend = list(title = list(text = "Type"))
  )
